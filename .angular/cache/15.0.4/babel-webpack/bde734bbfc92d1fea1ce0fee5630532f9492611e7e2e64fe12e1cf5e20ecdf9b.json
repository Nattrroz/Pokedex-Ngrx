{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { GetPokemonType, GetPokemonTypeBackground, GetPokemonTypeIcon, PokemonTypes } from 'src/app/core/models/enums/pokemon-types.enum';\nimport { GetPokemonAction } from 'src/app/store/pokemon/actions/get-pokemon.action';\nlet PokedexComponent = class PokedexComponent {\n  /**\r\n   * Constructor\r\n   * @param _store Almacén de estados.\r\n   */\n  constructor(_store) {\n    this._store = _store;\n    /**\r\n     * Objeto para quitar la suscripción.\r\n     */\n    this.unsubscribe = new Subject();\n    /**\r\n    * Identificador de entrada del pokemón.\r\n    */\n    this.pokemonId = 1;\n    /**\r\n     * Tipos de pokemones.\r\n    */\n    this.pokemonType = Object.values(PokemonTypes).filter(value => typeof value === \"string\");\n    this.pokemonTypes = '';\n    this.isLoading$ = this._store.select(state => state.pokemon.isLoading);\n    this.pokemon$ = _store.select(state => state.pokemon);\n    this.sprites$ = _store.select(state => state.pokemon.sprites.other.dream_world);\n  }\n  ngOnInit() {\n    this._store.dispatch(new GetPokemonAction(1));\n  }\n  /**\r\n   * Obtiene el tipo de pokemón del enumerable.\r\n   * @param pokemonType Clasificación de alerta\r\n   */\n  getPokemonType(pokemonType) {\n    this.pokemonTypes = pokemonType;\n    let pokemonTypes = [];\n    this.pokemonType.forEach(type => {\n      if (type == pokemonType) {\n        pokemonTypes.push({\n          id: +type,\n          text: GetPokemonType.get(pokemonType)\n        });\n      }\n    });\n    return pokemonTypes;\n  }\n  /**\r\n   * Obtiene el tipo de pokemón del enumerable.\r\n   * @param pokemonType Clasificación de alerta\r\n   */\n  getPokemonTypeIcon(pokemonType) {\n    let pokemonTypeIcons = [];\n    this.pokemonType.forEach(type => {\n      if (type == pokemonType) {\n        pokemonTypeIcons.push({\n          id: +type,\n          text: GetPokemonTypeIcon.get(pokemonType)\n        });\n      }\n    });\n    return pokemonTypeIcons;\n  }\n  /**\r\n   * Obtiene el tipo de pokemón del enumerable.\r\n   * @param pokemonType Clasificación de alerta\r\n   */\n  getPokemonTypeBackground(pokemonType) {\n    let pokemonTypeBackground = [];\n    this.pokemonType.forEach(type => {\n      if (type == pokemonType) {\n        pokemonTypeBackground.push({\n          id: +type,\n          text: GetPokemonTypeBackground.get(pokemonType)\n        });\n      }\n    });\n    return pokemonTypeBackground;\n  }\n};\n__decorate([Input()], PokedexComponent.prototype, \"pokemonId\", void 0);\nPokedexComponent = __decorate([Component({\n  selector: 'app-pokedex',\n  templateUrl: './pokedex.component.html',\n  styleUrls: ['./pokedex.component.css']\n})\n/**\r\n * Componente para la vista de los pokemones.\r\n */], PokedexComponent);\nexport { PokedexComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAQ,eAAe;AAEhD,SAAqBC,OAAO,QAAQ,MAAM;AAC1C,SAASC,cAAc,EAAEC,wBAAwB,EAAEC,kBAAkB,EAAEC,YAAY,QAAQ,8CAA8C;AAKzI,SAASC,gBAAgB,QAAQ,kDAAkD;AAW5E,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAoC3B;;;;EAIAC,YAAsBC,MAAuB;IAAvB,WAAM,GAANA,MAAM;IAtC5B;;;IAGO,gBAAW,GAAkB,IAAIR,OAAO,EAAQ;IAEvD;;;IAGgB,cAAS,GAAW,CAAC;IAiBrC;;;IAGO,gBAAW,GAAGS,MAAM,CAACC,MAAM,CAACN,YAAY,CAAC,CAACO,MAAM,CACpDC,KAAK,IAAK,OAAOA,KAAK,KAAK,QAAQ,CACrC;IAEM,iBAAY,GAAW,EAAE;IAO9B,IAAI,CAACC,UAAU,GAAG,IAAI,CAACL,MAAM,CAACM,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,OAAO,CAACC,SAAS,CAAC;IACtE,IAAI,CAACC,QAAQ,GAAGV,MAAM,CAACM,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,OAAO,CAAC;IACrD,IAAI,CAACG,QAAQ,GAAGX,MAAM,CAACM,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,OAAO,CAACI,OAAO,CAACC,KAAK,CAACC,WAAW,CAAC;EACjF;EACAC,QAAQ;IACN,IAAI,CAACf,MAAM,CAACgB,QAAQ,CAAC,IAAInB,gBAAgB,CAAC,CAAC,CAAC,CAAC;EAC/C;EAEA;;;;EAIAoB,cAAc,CAACC,WAAmB;IAChC,IAAI,CAACC,YAAY,GAAGD,WAAW;IAC/B,IAAIC,YAAY,GAAgD,EAAE;IAClE,IAAI,CAACD,WAAW,CAACE,OAAO,CAAEC,IAAI,IAAI;MAChC,IAAGA,IAAI,IAAIH,WAAW,EAAC;QACrBC,YAAY,CAACG,IAAI,CAAC;UAChBC,EAAE,EAAE,CAACF,IAAI;UACTG,IAAI,EAAE/B,cAAc,CAACgC,GAAG,CAACP,WAAW;SACrC,CAAC;;IAEN,CAAC,CAAC;IACF,OAAOC,YAAY;EACrB;EAEA;;;;EAIAO,kBAAkB,CAACR,WAAmB;IACpC,IAAIS,gBAAgB,GAAgD,EAAE;IACtE,IAAI,CAACT,WAAW,CAACE,OAAO,CAAEC,IAAI,IAAI;MAChC,IAAGA,IAAI,IAAIH,WAAW,EAAC;QACrBS,gBAAgB,CAACL,IAAI,CAAC;UACpBC,EAAE,EAAE,CAACF,IAAI;UACTG,IAAI,EAAE7B,kBAAkB,CAAC8B,GAAG,CAACP,WAAW;SACzC,CAAC;;IAEN,CAAC,CAAC;IACF,OAAOS,gBAAgB;EACzB;EAEA;;;;EAIAC,wBAAwB,CAACV,WAAmB;IAC1C,IAAIW,qBAAqB,GAAgD,EAAE;IAC3E,IAAI,CAACX,WAAW,CAACE,OAAO,CAAEC,IAAI,IAAI;MAChC,IAAGA,IAAI,IAAIH,WAAW,EAAC;QACrBW,qBAAqB,CAACP,IAAI,CAAC;UACzBC,EAAE,EAAE,CAACF,IAAI;UACTG,IAAI,EAAE9B,wBAAwB,CAAC+B,GAAG,CAACP,WAAW;SAC/C,CAAC;;IAEN,CAAC,CAAC;IACF,OAAOW,qBAAqB;EAC9B;CAED;AA3FUC,YAARvC,KAAK,EAAE,mDAA8B;AAV3BO,gBAAgB,eAT5BR,SAAS,CAAC;EACTyC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC;AAED;;GAAA,GAGanC,gBAAgB,CAqG5B;SArGYA,gBAAgB","names":["Component","Input","Subject","GetPokemonType","GetPokemonTypeBackground","GetPokemonTypeIcon","PokemonTypes","GetPokemonAction","PokedexComponent","constructor","_store","Object","values","filter","value","isLoading$","select","state","pokemon","isLoading","pokemon$","sprites$","sprites","other","dream_world","ngOnInit","dispatch","getPokemonType","pokemonType","pokemonTypes","forEach","type","push","id","text","get","getPokemonTypeIcon","pokemonTypeIcons","getPokemonTypeBackground","pokemonTypeBackground","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\didie\\Desktop\\pokedex\\pokedex-app\\src\\app\\modules\\pokemon\\components\\pokemon-card\\pokedex.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subject } from 'rxjs';\nimport { GetPokemonType, GetPokemonTypeBackground, GetPokemonTypeIcon, PokemonTypes } from 'src/app/core/models/enums/pokemon-types.enum';\nimport { DreamWorldSprite } from 'src/app/core/models/pokemon/pokemon-sprites';\nimport { PokemonStats } from 'src/app/core/models/pokemon/pokemon-stats';\nimport { Pokemon, Types } from 'src/app/core/models/pokemon/pokemon.model';\nimport { AppState } from 'src/app/store/app-state/app-state.model';\nimport { GetPokemonAction } from 'src/app/store/pokemon/actions/get-pokemon.action';\n\n@Component({\n  selector: 'app-pokedex',\n  templateUrl: './pokedex.component.html',\n  styleUrls: ['./pokedex.component.css']\n})\n\n/**\n * Componente para la vista de los pokemones.\n */\nexport class PokedexComponent {\n\n  /**\n   * Objeto para quitar la suscripción.\n   */\n  public unsubscribe: Subject<void> = new Subject<void>();\n\n  /**\n  * Identificador de entrada del pokemón.\n  */\n  @Input() public pokemonId: number = 1;\n\n  /**\n   * Observable de tipo pokemón.\n   */\n  public pokemon$: Observable<Pokemon>;\n\n  /**\n   * Observable para los sprites del pokemón.\n   */\n  public sprites$: Observable<DreamWorldSprite>;\n\n  /**\n  * Indica si se muestra el cargador del componente o no.\n  */\n  public isLoading$: Observable<boolean>;\n\n  /**\n   * Tipos de pokemones.\n  */\n  public pokemonType = Object.values(PokemonTypes).filter(\n    (value) => typeof value === \"string\"\n  );\n  \n  public pokemonTypes: string = '';\n\n  /**\n   * Constructor\n   * @param _store Almacén de estados.\n   */\n  constructor(protected _store: Store<AppState>) {\n    this.isLoading$ = this._store.select(state => state.pokemon.isLoading);\n    this.pokemon$ = _store.select(state => state.pokemon);\n    this.sprites$ = _store.select(state => state.pokemon.sprites.other.dream_world);\n  }\n  ngOnInit(){\n    this._store.dispatch(new GetPokemonAction(1));\n  }\n\n  /**\n   * Obtiene el tipo de pokemón del enumerable.\n   * @param pokemonType Clasificación de alerta\n   */\n  getPokemonType(pokemonType: string) {\n    this.pokemonTypes = pokemonType;\n    let pokemonTypes: { id: number; text: string | undefined; }[] = [];\n    this.pokemonType.forEach((type) => {\n      if(type == pokemonType){\n        pokemonTypes.push({\n          id: +type,\n          text: GetPokemonType.get(pokemonType),\n        });\n      }\n    });\n    return pokemonTypes;\n  }\n\n  /**\n   * Obtiene el tipo de pokemón del enumerable.\n   * @param pokemonType Clasificación de alerta\n   */\n  getPokemonTypeIcon(pokemonType: string) {\n    let pokemonTypeIcons: { id: number; text: string | undefined; }[] = [];\n    this.pokemonType.forEach((type) => {\n      if(type == pokemonType){\n        pokemonTypeIcons.push({\n          id: +type,\n          text: GetPokemonTypeIcon.get(pokemonType),\n        });\n      }\n    });\n    return pokemonTypeIcons;\n  }\n\n  /**\n   * Obtiene el tipo de pokemón del enumerable.\n   * @param pokemonType Clasificación de alerta\n   */\n  getPokemonTypeBackground(pokemonType: string) {\n    let pokemonTypeBackground: { id: number; text: string | undefined; }[] = [];\n    this.pokemonType.forEach((type) => {\n      if(type == pokemonType){\n        pokemonTypeBackground.push({\n          id: +type,\n          text: GetPokemonTypeBackground.get(pokemonType),\n        });\n      }\n    });\n    return pokemonTypeBackground;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
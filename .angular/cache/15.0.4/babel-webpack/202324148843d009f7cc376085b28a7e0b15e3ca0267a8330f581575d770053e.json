{"ast":null,"code":"import { ResetCounterAction } from 'src/app/store/counter/actions/reset-counter.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\n/**\r\n * Clase que incrementa y decrementa y reinicia el contador\r\n */\nexport class GrandchildComponent {\n  /**\r\n   * Constructor del componente.\r\n   * @param store Almacén de estados de la aplicación.\r\n   */\n  constructor(store) {\n    this.store = store;\n    /**\r\n     * Contador\r\n     */\n    this.counter = 0;\n  }\n  /**\r\n   * Método que se ejecuta al iniciar el componente.\r\n   */\n  ngOnInit() {\n    this.store.select(x => x.counter).subscribe(counter => this.counter = counter);\n  }\n  /**\r\n   * Reinicia el contador a 0\r\n   */\n  resetCounter() {\n    this.store.dispatch(new ResetCounterAction());\n  }\n}\nGrandchildComponent.ɵfac = function GrandchildComponent_Factory(t) {\n  return new (t || GrandchildComponent)(i0.ɵɵdirectiveInject(i1.Store));\n};\nGrandchildComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: GrandchildComponent,\n  selectors: [[\"app-grandchild\"]],\n  decls: 8,\n  vars: 1,\n  consts: [[1, \"waves-effect\", \"waves-light\", \"btn\", \"red\", 3, \"click\"], [1, \"material-icons\", \"right\"]],\n  template: function GrandchildComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h4\");\n      i0.ɵɵtext(1, \"Contador\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"h5\");\n      i0.ɵɵtext(3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"button\", 0);\n      i0.ɵɵlistener(\"click\", function GrandchildComponent_Template_button_click_4_listener() {\n        return ctx.resetCounter();\n      });\n      i0.ɵɵelementStart(5, \"i\", 1);\n      i0.ɵɵtext(6, \"replay\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(7, \"Reset\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate(ctx.counter);\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"mappings":"AAEA,SAASA,kBAAkB,QAAQ,oDAAoD;;;AASvF;;;AAGA,OAAM,MAAOC,mBAAmB;EAO9B;;;;EAIAC,YAAoBC,KAAgC;IAAhC,UAAK,GAALA,KAAK;IATzB;;;IAGA,YAAO,GAAW,CAAC;EAQnB;EAEA;;;EAGAC,QAAQ;IACN,IAAI,CAACD,KAAK,CAACE,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,OAAO,CAAC,CAChCC,SAAS,CAAED,OAAO,IAAI,IAAI,CAACA,OAAO,GAAGA,OAAO,CAAC;EAChD;EAEA;;;EAGAE,YAAY;IACV,IAAI,CAACN,KAAK,CAACO,QAAQ,CAAC,IAAIV,kBAAkB,GAAC;EAC7C;;AA5BWC,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAU;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCdhCC,0BAAI;MAAAA,wBAAQ;MAAAA,iBAAK;MACjBA,0BAAI;MAAAA,YAAW;MAAAA,iBAAK;MAEpBA,iCAA0E;MAAlEA;QAAA,OAASC,kBAAc;MAAA,EAAC;MAA0CD,4BAAgC;MAAAA,sBAAM;MAAAA,iBAAI;MAAAA,qBAAK;MAAAA,iBAAS;;;MAF9HA,eAAW;MAAXA,iCAAW","names":["ResetCounterAction","GrandchildComponent","constructor","store","ngOnInit","select","x","counter","subscribe","resetCounter","dispatch","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["C:\\Users\\didie\\Desktop\\pokedex\\pokedex-app\\src\\app\\counter\\grandchild\\grandchild.component.ts","C:\\Users\\didie\\Desktop\\pokedex\\pokedex-app\\src\\app\\counter\\grandchild\\grandchild.component.html"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { ResetCounterAction } from 'src/app/store/counter/actions/reset-counter.action';\r\nimport { CounterModuleState } from 'src/app/store/counter/app-state/module-state.model';\r\n\r\n@Component({\r\n  selector: 'app-grandchild',\r\n  templateUrl: './grandchild.component.html',\r\n  styles: [\r\n  ]\r\n})\r\n/**\r\n * Clase que incrementa y decrementa y reinicia el contador\r\n */\r\nexport class GrandchildComponent {\r\n\r\n  /**\r\n   * Contador\r\n   */\r\n  counter: number = 0;\r\n  \r\n  /**\r\n   * Constructor del componente.\r\n   * @param store Almacén de estados de la aplicación.\r\n   */\r\n  constructor(private store: Store<CounterModuleState>) {\r\n    \r\n  }\r\n\r\n  /**\r\n   * Método que se ejecuta al iniciar el componente.\r\n   */\r\n  ngOnInit(){\r\n    this.store.select(x => x.counter)\r\n    .subscribe( counter => this.counter = counter);\r\n  }\r\n\r\n  /**\r\n   * Reinicia el contador a 0\r\n   */\r\n  resetCounter(){\r\n    this.store.dispatch(new ResetCounterAction);\r\n  }\r\n}\r\n","<h4>Contador</h4>\n<h5>{{counter}}</h5>\n\n<button (click)=\"resetCounter()\" class=\"waves-effect waves-light btn red\"><i class=\"material-icons right\">replay</i>Reset</button>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}
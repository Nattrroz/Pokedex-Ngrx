{"ast":null,"code":"import { createEffect, ofType } from \"@ngrx/effects\";\nimport { POKEMON_ENDPOINT_SERVICE } from \"src/app/core/interfaces/services/pokemon/pokemon-endpoint-service.interface\";\nimport { ActionsConstants } from \"../actions/actions-constants\";\nimport { switchMap } from \"rxjs/operators\";\nimport { SetLoadingPokemonAction } from \"../actions/set-loading-pokemon.action\";\nimport { GetPokemonSuccessAction } from \"../actions/get-pokemon-success.action\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/effects\";\n/**\r\n * Efecto que obtiene la información parcial de un pokemón.\r\n */\nexport class GetPokemonInfoEffect {\n  constructor(_actions$, _pokemonEndpointService) {\n    this._actions$ = _actions$;\n    this._pokemonEndpointService = _pokemonEndpointService;\n    /**\r\n     * Creación del efecto.\r\n     */\n    this.observable$ = createEffect(() => this.execute());\n  }\n  /**\r\n   * Método que ejecuta el efecto.\r\n   */\n  execute() {\n    return this._actions$.pipe(ofType(ActionsConstants.GetPokemonAction), switchMap(action => this._pokemonEndpointService.getPokemon(action.pokemonId).pipe(switchMap(response => {\n      return [new GetPokemonSuccessAction(response), new SetLoadingPokemonAction(false)];\n    }))));\n  }\n}\nGetPokemonInfoEffect.ɵfac = function GetPokemonInfoEffect_Factory(t) {\n  return new (t || GetPokemonInfoEffect)(i0.ɵɵinject(i1.Actions), i0.ɵɵinject(POKEMON_ENDPOINT_SERVICE));\n};\nGetPokemonInfoEffect.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GetPokemonInfoEffect,\n  factory: GetPokemonInfoEffect.ɵfac\n});","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { GetPokemonType, GetPokemonTypeBackground, GetPokemonTypeIcon, PokemonTypes } from 'src/app/core/models/enums/pokemon-types.enum';\nimport { GetPokemonAction } from 'src/app/store/pokemon/actions/get-pokemon.action';\nlet PokedexComponent = class PokedexComponent {\n  /**\r\n   * Constructor\r\n   * @param _store Almacén de estados de la aplicación.\r\n   */\n  constructor(_store) {\n    this._store = _store;\n    /**\r\n     * Objeto para quitar la suscripción.\r\n     */\n    this.unsubscribe = new Subject();\n    /**\r\n     * Tipos de pokemones.\r\n    */\n    this.pokemonTypes = Object.values(PokemonTypes).filter(value => typeof value === \"string\");\n    this.isLoading$ = this._store.select(state => state.pokemon.isLoading);\n    this.pokemon$ = _store.select(state => state.pokemon);\n    this.sprites$ = _store.select(state => state.pokemon.sprites.other.dream_world);\n    this.pokemonColorType = _store.select(x => x.pokemon.types.map(x => x.type.name));\n  }\n  /**\r\n   * Método que se ejecuta al iniciar el componente.\r\n   */\n  ngOnInit() {\n    this._store.dispatch(new GetPokemonAction(1));\n  }\n  /**\r\n   * Obtiene el tipo de pokemón del enumerable.\r\n   * @param type Tipo de pokemón.\r\n   */\n  getPokemonType(type) {\n    let pokemonType = [];\n    this.pokemonTypes.forEach(x => {\n      if (x == type) {\n        pokemonType.push({\n          text: GetPokemonType.get(type)\n        });\n      }\n    });\n    return pokemonType;\n  }\n  /**\r\n   * Obtiene el icono del tipo de pokemón del enumerable.\r\n   * @param pokemonType Typo de pokemón.\r\n   */\n  getPokemonTypeIcon(type) {\n    let pokemonTypeIcon = [];\n    this.pokemonTypes.forEach(x => {\n      if (x == type) {\n        pokemonTypeIcon.push({\n          text: GetPokemonTypeIcon.get(type)\n        });\n      }\n    });\n    return pokemonTypeIcon;\n  }\n  /**\r\n   * Obtiene el background de acuerdo al tipo de pokemón del enumerable.\r\n   * @param pokemonType Tipo de pokemón.\r\n   */\n  getPokemonTypeBackground(type) {\n    let pokemonColorType = [];\n    this.pokemonTypes.forEach(x => {\n      if (x == type) {\n        pokemonColorType.push({\n          text: GetPokemonTypeBackground.get(type)\n        });\n      }\n    });\n    return pokemonColorType.map(x => x.text)[0];\n  }\n};\nPokedexComponent = __decorate([Component({\n  selector: 'app-pokedex',\n  templateUrl: './pokedex.component.html',\n  styleUrls: ['./pokedex.component.css']\n})\n/**\r\n * Componente para la vista de los pokemones.\r\n */], PokedexComponent);\nexport { PokedexComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAe,eAAe;AAEhD,SAAqBC,OAAO,QAAQ,MAAM;AAC1C,SAASC,cAAc,EAAEC,wBAAwB,EAAEC,kBAAkB,EAAEC,YAAY,QAAQ,8CAA8C;AAKzI,SAASC,gBAAgB,QAAQ,kDAAkD;AAW5E,IAAMC,gBAAgB,GAAtB,MAAMA,gBAAgB;EAkC3B;;;;EAIAC,YAAsBC,MAAuB;IAAvB,WAAM,GAANA,MAAM;IApC5B;;;IAGO,gBAAW,GAAkB,IAAIR,OAAO,EAAQ;IAiBvD;;;IAGO,iBAAY,GAAGS,MAAM,CAACC,MAAM,CAACN,YAAY,CAAC,CAACO,MAAM,CACrDC,KAAK,IAAK,OAAOA,KAAK,KAAK,QAAQ,CACrC;IAYC,IAAI,CAACC,UAAU,GAAG,IAAI,CAACL,MAAM,CAACM,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,OAAO,CAACC,SAAS,CAAC;IACtE,IAAI,CAACC,QAAQ,GAAGV,MAAM,CAACM,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,OAAO,CAAC;IACrD,IAAI,CAACG,QAAQ,GAAGX,MAAM,CAACM,MAAM,CAACC,KAAK,IAAIA,KAAK,CAACC,OAAO,CAACI,OAAO,CAACC,KAAK,CAACC,WAAW,CAAC;IAC/E,IAAI,CAACC,gBAAgB,GAAGf,MAAM,CAACM,MAAM,CAACU,CAAC,IAAIA,CAAC,CAACR,OAAO,CAACS,KAAK,CAACC,GAAG,CAACF,CAAC,IAAIA,CAAC,CAACG,IAAI,CAACC,IAAI,CAAC,CAAC;EACnF;EAEA;;;EAGAC,QAAQ;IACN,IAAI,CAACrB,MAAM,CAACsB,QAAQ,CAAC,IAAIzB,gBAAgB,CAAC,CAAC,CAAC,CAAC;EAC/C;EAEA;;;;EAIA0B,cAAc,CAACJ,IAAY;IACzB,IAAIK,WAAW,GAAyB,EAAE;IAC1C,IAAI,CAACC,YAAY,CAACC,OAAO,CAAEV,CAAC,IAAI;MAC9B,IAAIA,CAAC,IAAIG,IAAI,EAAE;QACbK,WAAW,CAACG,IAAI,CAAC;UACfC,IAAI,EAAEnC,cAAc,CAACoC,GAAG,CAACV,IAAI;SAC9B,CAAC;;IAEN,CAAC,CAAC;IACF,OAAOK,WAAW;EACpB;EAEA;;;;EAIAM,kBAAkB,CAACX,IAAY;IAC7B,IAAIY,eAAe,GAAyB,EAAE;IAC9C,IAAI,CAACN,YAAY,CAACC,OAAO,CAAEV,CAAC,IAAI;MAC9B,IAAIA,CAAC,IAAIG,IAAI,EAAE;QACbY,eAAe,CAACJ,IAAI,CAAC;UACnBC,IAAI,EAAEjC,kBAAkB,CAACkC,GAAG,CAACV,IAAI;SAClC,CAAC;;IAEN,CAAC,CAAC;IACF,OAAOY,eAAe;EACxB;EAEA;;;;EAIAC,wBAAwB,CAACb,IAAY;IACnC,IAAIJ,gBAAgB,GAAyB,EAAE;IAC/C,IAAI,CAACU,YAAY,CAACC,OAAO,CAAEV,CAAC,IAAI;MAC9B,IAAIA,CAAC,IAAIG,IAAI,EAAE;QACbJ,gBAAgB,CAACY,IAAI,CAAC;UACpBC,IAAI,EAAElC,wBAAwB,CAACmC,GAAG,CAACV,IAAI;SACxC,CAAC;;IAEN,CAAC,CAAC;IACF,OAAOJ,gBAAgB,CAACG,GAAG,CAACF,CAAC,IAAIA,CAAC,CAACY,IAAI,CAAC,CAAC,CAAC,CAAC;EAC7C;CACD;AAnGY9B,gBAAgB,eAT5BP,SAAS,CAAC;EACT0C,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,0BAA0B;EACvCC,SAAS,EAAE,CAAC,yBAAyB;CACtC;AAED;;GAAA,GAGarC,gBAAgB,CAmG5B;SAnGYA,gBAAgB","names":["Component","Subject","GetPokemonType","GetPokemonTypeBackground","GetPokemonTypeIcon","PokemonTypes","GetPokemonAction","PokedexComponent","constructor","_store","Object","values","filter","value","isLoading$","select","state","pokemon","isLoading","pokemon$","sprites$","sprites","other","dream_world","pokemonColorType","x","types","map","type","name","ngOnInit","dispatch","getPokemonType","pokemonType","pokemonTypes","forEach","push","text","get","getPokemonTypeIcon","pokemonTypeIcon","getPokemonTypeBackground","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\Users\\didie\\Desktop\\pokedex\\pokedex-app\\src\\app\\modules\\pokemon\\components\\pokemon-card\\pokedex.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { Observable, Subject } from 'rxjs';\nimport { GetPokemonType, GetPokemonTypeBackground, GetPokemonTypeIcon, PokemonTypes } from 'src/app/core/models/enums/pokemon-types.enum';\nimport { DreamWorldSprite } from 'src/app/core/models/pokemon/pokemon-sprites';\nimport { PokemonStats } from 'src/app/core/models/pokemon/pokemon-stats';\nimport { Pokemon, Types } from 'src/app/core/models/pokemon/pokemon.model';\nimport { AppState } from 'src/app/store/app-state/app-state.model';\nimport { GetPokemonAction } from 'src/app/store/pokemon/actions/get-pokemon.action';\n\n@Component({\n  selector: 'app-pokedex',\n  templateUrl: './pokedex.component.html',\n  styleUrls: ['./pokedex.component.css']\n})\n\n/**\n * Componente para la vista de los pokemones.\n */\nexport class PokedexComponent {\n\n  /**\n   * Objeto para quitar la suscripción.\n   */\n  public unsubscribe: Subject<void> = new Subject<void>();\n\n  /**\n   * Observable de tipo pokemón.\n   */\n  public pokemon$: Observable<Pokemon>;\n\n  /**\n   * Observable para los sprites del pokemón.\n   */\n  public sprites$: Observable<DreamWorldSprite>;\n\n  /**\n  * Indica si se muestra el cargador del componente o no.\n  */\n  public isLoading$: Observable<boolean>;\n\n  /**\n   * Tipos de pokemones.\n  */\n  public pokemonTypes = Object.values(PokemonTypes).filter(\n    (value) => typeof value === \"string\"\n  );\n\n  /**\n   * Observable para obtener el background del tipo de pokemon.\n   */\n  public pokemonColorType!: Observable<string[]>\n\n  /**\n   * Constructor\n   * @param _store Almacén de estados de la aplicación.\n   */\n  constructor(protected _store: Store<AppState>) {\n    this.isLoading$ = this._store.select(state => state.pokemon.isLoading);\n    this.pokemon$ = _store.select(state => state.pokemon);\n    this.sprites$ = _store.select(state => state.pokemon.sprites.other.dream_world);\n    this.pokemonColorType = _store.select(x => x.pokemon.types.map(x => x.type.name))\n  }\n\n  /**\n   * Método que se ejecuta al iniciar el componente.\n   */\n  ngOnInit() {\n    this._store.dispatch(new GetPokemonAction(1));\n  }\n\n  /**\n   * Obtiene el tipo de pokemón del enumerable.\n   * @param type Tipo de pokemón.\n   */\n  getPokemonType(type: string) {\n    let pokemonType: { text?: string; }[] = [];\n    this.pokemonTypes.forEach((x) => {\n      if (x == type) {\n        pokemonType.push({\n          text: GetPokemonType.get(type),\n        });\n      }\n    });\n    return pokemonType;\n  }\n\n  /**\n   * Obtiene el icono del tipo de pokemón del enumerable.\n   * @param pokemonType Typo de pokemón.\n   */\n  getPokemonTypeIcon(type: string) {\n    let pokemonTypeIcon: { text?: string; }[] = [];\n    this.pokemonTypes.forEach((x) => {\n      if (x == type) {\n        pokemonTypeIcon.push({\n          text: GetPokemonTypeIcon.get(type),\n        });\n      }\n    });\n    return pokemonTypeIcon;\n  }\n\n  /**\n   * Obtiene el background de acuerdo al tipo de pokemón del enumerable.\n   * @param pokemonType Tipo de pokemón.\n   */\n  getPokemonTypeBackground(type: string) {\n    let pokemonColorType: { text?: string; }[] = [];\n    this.pokemonTypes.forEach((x) => {\n      if (x == type) {\n        pokemonColorType.push({\n          text: GetPokemonTypeBackground.get(type),\n        });\n      }\n    })\n    return pokemonColorType.map(x => x.text)[0];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}